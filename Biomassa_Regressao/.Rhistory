setwd('/home/marcos/Documentos/01_IAA/IAA007_008_MachineLearning/Praticas/02_Pratica_Cancer_de_Mama/')
getwd()
library(caret)
library(mlbench)
library(mice)
# Importar conjunto de dados
dados <- read.csv('Material 02 - 2 - Cancer de Mama - Dados.csv')
# analisando o dataframe
summary(dados)
names(dados)
dados
# tratando valores missing
dados$id <- NULL
dados
# tratando valores missing
dados$Id <- NULL
dados
imp <- mice(dados)
dados <- complete(imp,1)
#library(e1071)
install.packages("mice")
install.packages("mice")
setwd('/home/marcos/Documentos/01_IAA/IAA007_008_MachineLearning/Praticas/02_Pratica_Cancer_de_Mama/')
getwd()
library(caret)
library(mlbench)
library(mice)
# Importar conjunto de dados
dados <- read.csv('Material 02 - 2 - Cancer de Mama - Dados.csv')
# analisando o dataframe
summary(dados)
dados
names(dados)
# tratando valores missing
dados$Id <- NULL
dados
imp <- mice(dados)
dados <- complete(imp,1)
dados
# separando base treino - 80% e teste 20%
set.seed(1912)
names(dados)
indices <- createDataPartition(dados$Class, p=0.80, list=FALSE)
treino <- dados[indices,]
teste <- dados[-indices,]
# treinamento do modelo com o conjunto de treino
set.seed(1912)
rna <-  train(Class~.,data=treino, method="nnet",trace=FALSE)
rna
# predições dos valores do conjunto de teste
predict.rna <- predict(rna,teste)
# matriz de confusão
confusionMatrix(predict.rna, teste$Class)
#Usando Cross-Validation
ctrl <- trainControl(method = "cv", number = 10)
# executa a RNA com esse ctrl
set.seed(1912)
rna <- train(Class~., data = treino, method = "nnet", trace = FALSE,trControl=ctrl)
# parametrização RNA
# size, decay
grid <- expand.grid(size = seq(from = 1, to = 45, by=10), decay = seq(from=0.1, to=0.9, by=0.3))
set.seed(1912)
rna <- train(
form = Class~.,
data = treino,
method = 'nnet',
tuneGrid = grid,
trControl = ctrl,
maxit = 2000,
trace = FALSE
)
# verificar o resultado do treinamento
rna
# predições dos valores do conjunto de teste
predict.rna <- predict(rna,teste)
# matriz de confusão
confusionMatrix(predict.rna, teste$Class)
setwd('/home/marcos/Documentos/01_IAA/IAA007_008_MachineLearning/Praticas/04_Pratica_Biomassa')
getwd()
# instalar bibliotecas
#install.packages("caret")
#install.packages("e1071")
#install.packages("mlbench")
#install.packages("mice")
library(mlbench)
library(caret)
library(mice)
# leitura dos dados da base de volumes
dados <- read.csv("Material 02 - 4 - R - Biomassa - Dados.csv")
View(dados)
dados
# tratando valores missing
#dados$id <- NULL
imp <- mice(dados)
dados
dados <- complete(imp,1)
# Cria arquivo de treino e teste
set.seed(37)
indices <- createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <- dados[indices,]
teste <- dados[-indices,]
# Treino com Hold-Out
set.seed(37)
rna <- train(biomassa~., data=treino, method="nnet", trace=FALSE)
rna
# Treino com Hold-Out
set.seed(37)
rna <- train(biomassa~., data=treino, method="nnet",linout=T, trace=FALSE)
rna
predicoes.rna <- predict(rna, teste)
rmse(teste$biomassa, predicoes.rna)
# Pacote para cálculo das métricas (rmse)
#install.packages("Metrics")
library(Metrics)
rmse(teste$biomassa, predicoes.rna)
r2 <- function(predito, observado) {
return(1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
r2(teste$biomassa, predicoes.rna) # R2 com hold-out
# CV e parametrização da RNA
control <- trainControl(method = "cv", number = 10)
tuneGrid <- expand.grid(size = seq(from = 1, to = 10, by = 1), decay = seq(from = 0.1, to = 0.9, by = 0.3))
set.seed(37)
rna <- train(biomassa~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
rna
# Predições e métricas
predicoes.rna <- predict(rna, teste)
rmse(teste$Volume, predicoes.rna)
r2(teste$Volume, predicoes.rna) # R2 com Cross Validation parametrizado
rna
# Predições e métricas
predicoes.rna <- predict(rna, teste)
rmse(teste$biomassa, predicoes.rna)
r2(teste$biomassa, predicoes.rna) # R2 com Cross Validation parametrizado
# Predições de novos casos
dados_novos_casos <- read.csv("Material 02 - 4 - R - Biomassa - Dados - Novos Casos.csv")
dados_novos_casos
dados_novos_casos$biomassa <- NULL
dados_novos_casos
predict.rna <- predict(rna, dados_novos_casos)
resultado <- cbind(dados_novos_casos, predict.rna)
resultado
r2(teste$biomassa, predicoes.rna) # R2 com hold-out
r2(teste$biomassa, predicoes.rna) # R2 com Cross Validation parametrizado
# CV e parametrização da RNA
control <- trainControl(method = "cv", number = 10)
tuneGrid <- expand.grid(size = seq(from = 1, to = 10, by = 1), decay = seq(from = 0.1, to = 0.9, by = 0.3))
set.seed(37)
rna <- train(biomassa~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
rna
# matriz de confusão
confusionMatrix(predict.rna, teste$biomassa)
# matriz de confusão
confusionMatrix(predicoes.rna, teste$biomassa)
teste
# Predições e métricas
predicoes.rna <- predict(rna, teste)
# matriz de confusão
confusionMatrix(predicoes.rna, teste$biomassa)
rmse(teste$biomassa, predicoes.rna)
r2(teste$biomassa, predicoes.rna) # R2 com Cross Validation parametrizado
# matriz de confusão
confusionMatrix(resultado, teste$biomassa)
# matriz de confusão
confusionMatrix(dados_novos_casos, teste$biomassa)
# matriz de confusão
confusionMatrix(predict.rna, teste$biomassa)
# matriz de confusão
confusionMatrix(predict.rna, train()$biomassa)
# matriz de confusão
confusionMatrix(predict.rna, train$biomassa)
# matriz de confusão
confusionMatrix(predict.rna, traino$biomassa)
# matriz de confusão
confusionMatrix(predict.rna, treino$biomassa)
# matriz de confusão
confusionMatrix(predict.rna, teste$biomassa)
# matriz de confusão
confusionMatrix(resultado, teste$biomassa)
# matriz de confusão
confusionMatrix(predicoes.rna, teste$biomassa)
